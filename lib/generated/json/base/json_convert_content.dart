// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_wanandroid/models/systemlist_entity.dart';
import 'package:flutter_wanandroid/generated/json/systemlist_entity_helper.dart';
import 'package:flutter_wanandroid/models/systemclassification_entity.dart';
import 'package:flutter_wanandroid/generated/json/systemclassification_entity_helper.dart';
import 'package:flutter_wanandroid/models/banner_entity.dart';
import 'package:flutter_wanandroid/generated/json/banner_entity_helper.dart';
import 'package:flutter_wanandroid/models/user_entity.dart';
import 'package:flutter_wanandroid/generated/json/user_entity_helper.dart';
import 'package:flutter_wanandroid/models/profile_entity.dart';
import 'package:flutter_wanandroid/generated/json/profile_entity_helper.dart';
import 'package:flutter_wanandroid/models/cacheconfig_entity.dart';
import 'package:flutter_wanandroid/generated/json/cacheconfig_entity_helper.dart';
import 'package:flutter_wanandroid/models/official_entity.dart';
import 'package:flutter_wanandroid/generated/json/official_entity_helper.dart';
import 'package:flutter_wanandroid/models/official_history_entity.dart';
import 'package:flutter_wanandroid/generated/json/official_history_entity_helper.dart';
import 'package:flutter_wanandroid/models/navigation_entity.dart';
import 'package:flutter_wanandroid/generated/json/navigation_entity_helper.dart';
import 'package:flutter_wanandroid/models/articlelist_entity.dart';
import 'package:flutter_wanandroid/generated/json/articlelist_entity_helper.dart';
import 'package:flutter_wanandroid/models/answer_entity.dart';
import 'package:flutter_wanandroid/generated/json/answer_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case SystemlistEntity:
				return systemlistEntityFromJson(data as SystemlistEntity, json) as T;
			case SystemlistData:
				return systemlistDataFromJson(data as SystemlistData, json) as T;
			case SystemlistDataChildren:
				return systemlistDataChildrenFromJson(data as SystemlistDataChildren, json) as T;
			case SystemclassificationEntity:
				return systemclassificationEntityFromJson(data as SystemclassificationEntity, json) as T;
			case SystemclassificationData:
				return systemclassificationDataFromJson(data as SystemclassificationData, json) as T;
			case SystemclassificationDataDatas:
				return systemclassificationDataDatasFromJson(data as SystemclassificationDataDatas, json) as T;
			case BannerEntity:
				return bannerEntityFromJson(data as BannerEntity, json) as T;
			case BannerData:
				return bannerDataFromJson(data as BannerData, json) as T;
			case UserEntity:
				return userEntityFromJson(data as UserEntity, json) as T;
			case UserData:
				return userDataFromJson(data as UserData, json) as T;
			case ProfileEntity:
				return profileEntityFromJson(data as ProfileEntity, json) as T;
			case CacheconfigEntity:
				return cacheconfigEntityFromJson(data as CacheconfigEntity, json) as T;
			case OfficialEntity:
				return officialEntityFromJson(data as OfficialEntity, json) as T;
			case OfficialData:
				return officialDataFromJson(data as OfficialData, json) as T;
			case OfficialHistoryEntity:
				return officialHistoryEntityFromJson(data as OfficialHistoryEntity, json) as T;
			case OfficialHistoryData:
				return officialHistoryDataFromJson(data as OfficialHistoryData, json) as T;
			case OfficialHistoryDataDatas:
				return officialHistoryDataDatasFromJson(data as OfficialHistoryDataDatas, json) as T;
			case OfficialHistoryDataDatasTags:
				return officialHistoryDataDatasTagsFromJson(data as OfficialHistoryDataDatasTags, json) as T;
			case NavigationEntity:
				return navigationEntityFromJson(data as NavigationEntity, json) as T;
			case NavigationData:
				return navigationDataFromJson(data as NavigationData, json) as T;
			case NavigationDataArticles:
				return navigationDataArticlesFromJson(data as NavigationDataArticles, json) as T;
			case ArticlelistEntity:
				return articlelistEntityFromJson(data as ArticlelistEntity, json) as T;
			case ArticlelistData:
				return articlelistDataFromJson(data as ArticlelistData, json) as T;
			case ArticlelistDataDatas:
				return articlelistDataDatasFromJson(data as ArticlelistDataDatas, json) as T;
			case AnswerEntity:
				return answerEntityFromJson(data as AnswerEntity, json) as T;
			case AnswerData:
				return answerDataFromJson(data as AnswerData, json) as T;
			case AnswerDataDatas:
				return answerDataDatasFromJson(data as AnswerDataDatas, json) as T;
			case AnswerDataDatasTags:
				return answerDataDatasTagsFromJson(data as AnswerDataDatasTags, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case SystemlistEntity:
				return systemlistEntityToJson(data as SystemlistEntity);
			case SystemlistData:
				return systemlistDataToJson(data as SystemlistData);
			case SystemlistDataChildren:
				return systemlistDataChildrenToJson(data as SystemlistDataChildren);
			case SystemclassificationEntity:
				return systemclassificationEntityToJson(data as SystemclassificationEntity);
			case SystemclassificationData:
				return systemclassificationDataToJson(data as SystemclassificationData);
			case SystemclassificationDataDatas:
				return systemclassificationDataDatasToJson(data as SystemclassificationDataDatas);
			case BannerEntity:
				return bannerEntityToJson(data as BannerEntity);
			case BannerData:
				return bannerDataToJson(data as BannerData);
			case UserEntity:
				return userEntityToJson(data as UserEntity);
			case UserData:
				return userDataToJson(data as UserData);
			case ProfileEntity:
				return profileEntityToJson(data as ProfileEntity);
			case CacheconfigEntity:
				return cacheconfigEntityToJson(data as CacheconfigEntity);
			case OfficialEntity:
				return officialEntityToJson(data as OfficialEntity);
			case OfficialData:
				return officialDataToJson(data as OfficialData);
			case OfficialHistoryEntity:
				return officialHistoryEntityToJson(data as OfficialHistoryEntity);
			case OfficialHistoryData:
				return officialHistoryDataToJson(data as OfficialHistoryData);
			case OfficialHistoryDataDatas:
				return officialHistoryDataDatasToJson(data as OfficialHistoryDataDatas);
			case OfficialHistoryDataDatasTags:
				return officialHistoryDataDatasTagsToJson(data as OfficialHistoryDataDatasTags);
			case NavigationEntity:
				return navigationEntityToJson(data as NavigationEntity);
			case NavigationData:
				return navigationDataToJson(data as NavigationData);
			case NavigationDataArticles:
				return navigationDataArticlesToJson(data as NavigationDataArticles);
			case ArticlelistEntity:
				return articlelistEntityToJson(data as ArticlelistEntity);
			case ArticlelistData:
				return articlelistDataToJson(data as ArticlelistData);
			case ArticlelistDataDatas:
				return articlelistDataDatasToJson(data as ArticlelistDataDatas);
			case AnswerEntity:
				return answerEntityToJson(data as AnswerEntity);
			case AnswerData:
				return answerDataToJson(data as AnswerData);
			case AnswerDataDatas:
				return answerDataDatasToJson(data as AnswerDataDatas);
			case AnswerDataDatasTags:
				return answerDataDatasTagsToJson(data as AnswerDataDatasTags);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (SystemlistEntity).toString()){
			return SystemlistEntity().fromJson(json);
		}
		if(type == (SystemlistData).toString()){
			return SystemlistData().fromJson(json);
		}
		if(type == (SystemlistDataChildren).toString()){
			return SystemlistDataChildren().fromJson(json);
		}
		if(type == (SystemclassificationEntity).toString()){
			return SystemclassificationEntity().fromJson(json);
		}
		if(type == (SystemclassificationData).toString()){
			return SystemclassificationData().fromJson(json);
		}
		if(type == (SystemclassificationDataDatas).toString()){
			return SystemclassificationDataDatas().fromJson(json);
		}
		if(type == (BannerEntity).toString()){
			return BannerEntity().fromJson(json);
		}
		if(type == (BannerData).toString()){
			return BannerData().fromJson(json);
		}
		if(type == (UserEntity).toString()){
			return UserEntity().fromJson(json);
		}
		if(type == (UserData).toString()){
			return UserData().fromJson(json);
		}
		if(type == (ProfileEntity).toString()){
			return ProfileEntity().fromJson(json);
		}
		if(type == (CacheconfigEntity).toString()){
			return CacheconfigEntity().fromJson(json);
		}
		if(type == (OfficialEntity).toString()){
			return OfficialEntity().fromJson(json);
		}
		if(type == (OfficialData).toString()){
			return OfficialData().fromJson(json);
		}
		if(type == (OfficialHistoryEntity).toString()){
			return OfficialHistoryEntity().fromJson(json);
		}
		if(type == (OfficialHistoryData).toString()){
			return OfficialHistoryData().fromJson(json);
		}
		if(type == (OfficialHistoryDataDatas).toString()){
			return OfficialHistoryDataDatas().fromJson(json);
		}
		if(type == (OfficialHistoryDataDatasTags).toString()){
			return OfficialHistoryDataDatasTags().fromJson(json);
		}
		if(type == (NavigationEntity).toString()){
			return NavigationEntity().fromJson(json);
		}
		if(type == (NavigationData).toString()){
			return NavigationData().fromJson(json);
		}
		if(type == (NavigationDataArticles).toString()){
			return NavigationDataArticles().fromJson(json);
		}
		if(type == (ArticlelistEntity).toString()){
			return ArticlelistEntity().fromJson(json);
		}
		if(type == (ArticlelistData).toString()){
			return ArticlelistData().fromJson(json);
		}
		if(type == (ArticlelistDataDatas).toString()){
			return ArticlelistDataDatas().fromJson(json);
		}
		if(type == (AnswerEntity).toString()){
			return AnswerEntity().fromJson(json);
		}
		if(type == (AnswerData).toString()){
			return AnswerData().fromJson(json);
		}
		if(type == (AnswerDataDatas).toString()){
			return AnswerDataDatas().fromJson(json);
		}
		if(type == (AnswerDataDatasTags).toString()){
			return AnswerDataDatasTags().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<SystemlistEntity>[] is M){
			return data.map<SystemlistEntity>((e) => SystemlistEntity().fromJson(e)).toList() as M;
		}
		if(<SystemlistData>[] is M){
			return data.map<SystemlistData>((e) => SystemlistData().fromJson(e)).toList() as M;
		}
		if(<SystemlistDataChildren>[] is M){
			return data.map<SystemlistDataChildren>((e) => SystemlistDataChildren().fromJson(e)).toList() as M;
		}
		if(<SystemclassificationEntity>[] is M){
			return data.map<SystemclassificationEntity>((e) => SystemclassificationEntity().fromJson(e)).toList() as M;
		}
		if(<SystemclassificationData>[] is M){
			return data.map<SystemclassificationData>((e) => SystemclassificationData().fromJson(e)).toList() as M;
		}
		if(<SystemclassificationDataDatas>[] is M){
			return data.map<SystemclassificationDataDatas>((e) => SystemclassificationDataDatas().fromJson(e)).toList() as M;
		}
		if(<BannerEntity>[] is M){
			return data.map<BannerEntity>((e) => BannerEntity().fromJson(e)).toList() as M;
		}
		if(<BannerData>[] is M){
			return data.map<BannerData>((e) => BannerData().fromJson(e)).toList() as M;
		}
		if(<UserEntity>[] is M){
			return data.map<UserEntity>((e) => UserEntity().fromJson(e)).toList() as M;
		}
		if(<UserData>[] is M){
			return data.map<UserData>((e) => UserData().fromJson(e)).toList() as M;
		}
		if(<ProfileEntity>[] is M){
			return data.map<ProfileEntity>((e) => ProfileEntity().fromJson(e)).toList() as M;
		}
		if(<CacheconfigEntity>[] is M){
			return data.map<CacheconfigEntity>((e) => CacheconfigEntity().fromJson(e)).toList() as M;
		}
		if(<OfficialEntity>[] is M){
			return data.map<OfficialEntity>((e) => OfficialEntity().fromJson(e)).toList() as M;
		}
		if(<OfficialData>[] is M){
			return data.map<OfficialData>((e) => OfficialData().fromJson(e)).toList() as M;
		}
		if(<OfficialHistoryEntity>[] is M){
			return data.map<OfficialHistoryEntity>((e) => OfficialHistoryEntity().fromJson(e)).toList() as M;
		}
		if(<OfficialHistoryData>[] is M){
			return data.map<OfficialHistoryData>((e) => OfficialHistoryData().fromJson(e)).toList() as M;
		}
		if(<OfficialHistoryDataDatas>[] is M){
			return data.map<OfficialHistoryDataDatas>((e) => OfficialHistoryDataDatas().fromJson(e)).toList() as M;
		}
		if(<OfficialHistoryDataDatasTags>[] is M){
			return data.map<OfficialHistoryDataDatasTags>((e) => OfficialHistoryDataDatasTags().fromJson(e)).toList() as M;
		}
		if(<NavigationEntity>[] is M){
			return data.map<NavigationEntity>((e) => NavigationEntity().fromJson(e)).toList() as M;
		}
		if(<NavigationData>[] is M){
			return data.map<NavigationData>((e) => NavigationData().fromJson(e)).toList() as M;
		}
		if(<NavigationDataArticles>[] is M){
			return data.map<NavigationDataArticles>((e) => NavigationDataArticles().fromJson(e)).toList() as M;
		}
		if(<ArticlelistEntity>[] is M){
			return data.map<ArticlelistEntity>((e) => ArticlelistEntity().fromJson(e)).toList() as M;
		}
		if(<ArticlelistData>[] is M){
			return data.map<ArticlelistData>((e) => ArticlelistData().fromJson(e)).toList() as M;
		}
		if(<ArticlelistDataDatas>[] is M){
			return data.map<ArticlelistDataDatas>((e) => ArticlelistDataDatas().fromJson(e)).toList() as M;
		}
		if(<AnswerEntity>[] is M){
			return data.map<AnswerEntity>((e) => AnswerEntity().fromJson(e)).toList() as M;
		}
		if(<AnswerData>[] is M){
			return data.map<AnswerData>((e) => AnswerData().fromJson(e)).toList() as M;
		}
		if(<AnswerDataDatas>[] is M){
			return data.map<AnswerDataDatas>((e) => AnswerDataDatas().fromJson(e)).toList() as M;
		}
		if(<AnswerDataDatasTags>[] is M){
			return data.map<AnswerDataDatasTags>((e) => AnswerDataDatasTags().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}